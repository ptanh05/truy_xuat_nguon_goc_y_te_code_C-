@page
@model DisputeDashboardModel
@{
    ViewData["Title"] = "Dispute Management";
}

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col-md-8">
            <h1>Dispute Management</h1>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#reportDisputeModal">
                <i class="fas fa-exclamation-triangle"></i> Report Dispute
            </button>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4" id="statsContainer">
        <!-- Populated by JavaScript -->
    </div>

    <!-- Disputes Table -->
    <div class="card">
        <div class="card-header">
            <div class="row">
                <div class="col-md-6">
                    <h5>Disputes</h5>
                </div>
                <div class="col-md-6">
                    <select class="form-select form-select-sm" id="statusFilter" onchange="filterDisputes()">
                        <option value="">All Status</option>
                        <option value="Open">Open</option>
                        <option value="InProgress">In Progress</option>
                        <option value="Resolved">Resolved</option>
                        <option value="Closed">Closed</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Title</th>
                            <th>Status</th>
                            <th>Priority</th>
                            <th>Reported By</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="disputesTableBody">
                        <!-- Populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Report Dispute Modal -->
<div class="modal fade" id="reportDisputeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Report Dispute</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="reportDisputeForm">
                    <div class="mb-3">
                        <label class="form-label">NFT ID</label>
                        <input type="number" class="form-control" id="disputeNFTId" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Dispute Type</label>
                        <select class="form-select" id="disputeType" required>
                            <option value="">Select Type</option>
                            <option value="Counterfeit">Counterfeit</option>
                            <option value="Damaged">Damaged</option>
                            <option value="Missing">Missing</option>
                            <option value="Quality">Quality Issue</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <input type="text" class="form-control" id="disputeTitle" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="disputeDescription" rows="4" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Priority</label>
                        <select class="form-select" id="disputePriority">
                            <option value="Low">Low</option>
                            <option value="Medium" selected>Medium</option>
                            <option value="High">High</option>
                            <option value="Critical">Critical</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="reportDispute()">Report</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function loadStatistics() {
            try {
                const response = await fetch('/api/dispute/statistics');
                const stats = await response.json();
                
                const container = document.getElementById('statsContainer');
                container.innerHTML = `
                    <div class="col-md-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <h6 class="card-title">Total Disputes</h6>
                                <h3>${stats.totalDisputes}</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <h6 class="card-title">Open Disputes</h6>
                                <h3>${stats.openDisputes}</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <h6 class="card-title">Resolved</h6>
                                <h3>${stats.resolvedDisputes}</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <h6 class="card-title">Resolution Rate</h6>
                                <h3>${stats.resolutionRate.toFixed(1)}%</h3>
                            </div>
                        </div>
                    </div>
                `;
            } catch (error) {
                console.error('Error loading statistics:', error);
            }
        }

        async function loadDisputes(status = '') {
            try {
                const url = status 
                    ? `/api/dispute/status/${status}` 
                    : '/api/dispute?pageNumber=1&pageSize=10';
                
                const response = await fetch(url);
                const disputes = await response.json();
                
                const tbody = document.getElementById('disputesTableBody');
                tbody.innerHTML = '';

                disputes.forEach(dispute => {
                    const statusBadge = `<span class="badge bg-${getStatusColor(dispute.status)}">${dispute.status}</span>`;
                    const priorityBadge = `<span class="badge bg-${getPriorityColor(dispute.priority)}">${dispute.priority}</span>`;
                    
                    const row = `
                        <tr>
                            <td>${dispute.id}</td>
                            <td>${dispute.disputeType}</td>
                            <td>${dispute.title}</td>
                            <td>${statusBadge}</td>
                            <td>${priorityBadge}</td>
                            <td>${dispute.reportedByUser?.fullName || 'Unknown'}</td>
                            <td>${new Date(dispute.createdAt).toLocaleDateString()}</td>
                            <td>
                                <button class="btn btn-sm btn-info" onclick="viewDispute(${dispute.id})">
                                    <i class="fas fa-eye"></i> View
                                </button>
                            </td>
                        </tr>
                    `;
                    tbody.innerHTML += row;
                });
            } catch (error) {
                console.error('Error loading disputes:', error);
            }
        }

        function getStatusColor(status) {
            switch(status) {
                case 'Open': return 'danger';
                case 'InProgress': return 'warning';
                case 'Resolved': return 'success';
                case 'Closed': return 'secondary';
                default: return 'secondary';
            }
        }

        function getPriorityColor(priority) {
            switch(priority) {
                case 'Low': return 'info';
                case 'Medium': return 'warning';
                case 'High': return 'danger';
                case 'Critical': return 'dark';
                default: return 'secondary';
            }
        }

        async function reportDispute() {
            const nftId = document.getElementById('disputeNFTId').value;
            const type = document.getElementById('disputeType').value;
            const title = document.getElementById('disputeTitle').value;
            const description = document.getElementById('disputeDescription').value;
            const priority = document.getElementById('disputePriority').value;

            try {
                const response = await fetch('/api/dispute', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        nftId, reportedByUserId: 1, disputeType: type, title, description, priority
                    })
                });

                if (response.ok) {
                    alert('Dispute reported successfully');
                    document.getElementById('reportDisputeForm').reset();
                    bootstrap.Modal.getInstance(document.getElementById('reportDisputeModal')).hide();
                    loadDisputes();
                }
            } catch (error) {
                console.error('Error reporting dispute:', error);
                alert('Failed to report dispute');
            }
        }

        function filterDisputes() {
            const status = document.getElementById('statusFilter').value;
            loadDisputes(status);
        }

        function viewDispute(disputeId) {
            alert('Dispute details view coming soon');
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadStatistics();
            loadDisputes();
        });
    </script>
}
