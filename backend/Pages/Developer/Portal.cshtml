@page
@model DeveloperPortalModel
@{
    ViewData["Title"] = "Developer Portal";
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-3">
            <div class="list-group sticky-top" style="top: 20px;">
                <a href="#overview" class="list-group-item list-group-item-action active" data-bs-toggle="list">
                    <i class="fas fa-book"></i> Overview
                </a>
                <a href="#authentication" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-lock"></i> Authentication
                </a>
                <a href="#endpoints" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-code"></i> API Endpoints
                </a>
                <a href="#api-keys" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-key"></i> API Keys
                </a>
                <a href="#rate-limiting" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-tachometer-alt"></i> Rate Limiting
                </a>
                <a href="#webhooks" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-webhook"></i> Webhooks
                </a>
                <a href="#examples" class="list-group-item list-group-item-action" data-bs-toggle="list">
                    <i class="fas fa-terminal"></i> Code Examples
                </a>
            </div>
        </div>
        <div class="col-md-9">
            <div class="tab-content">
                <!-- Overview -->
                <div class="tab-pane fade show active" id="overview">
                    <h2>PharmaDNA API Documentation</h2>
                    <p class="lead">Welcome to the PharmaDNA API. This documentation will help you integrate with our pharmaceutical traceability system.</p>
                    
                    <h4>Base URL</h4>
                    <code>https://api.pharmadna.com/api</code>

                    <h4 class="mt-4">API Features</h4>
                    <ul>
                        <li>RESTful API with JSON responses</li>
                        <li>API Key authentication</li>
                        <li>Rate limiting (1000 requests/minute by default)</li>
                        <li>Webhook support for real-time events</li>
                        <li>Comprehensive error handling</li>
                        <li>Batch operations support</li>
                    </ul>
                </div>

                <!-- Authentication -->
                <div class="tab-pane fade" id="authentication">
                    <h2>Authentication</h2>
                    <p>All API requests require authentication using an API key and secret.</p>

                    <h4>Getting Started</h4>
                    <ol>
                        <li>Create an API key in the Developer Portal</li>
                        <li>Include the key in the <code>X-API-Key</code> header</li>
                        <li>Sign requests with your secret</li>
                    </ol>

                    <h4>Request Headers</h4>
                    <pre><code>X-API-Key: pk_your_api_key
X-API-Signature: signature_hash
Content-Type: application/json</code></pre>

                    <h4>Signature Generation</h4>
                    <pre><code>HMAC-SHA256(request_body, api_secret)</code></pre>
                </div>

                <!-- Endpoints -->
                <div class="tab-pane fade" id="endpoints">
                    <h2>API Endpoints</h2>

                    <div class="card mb-3">
                        <div class="card-header">
                            <span class="badge bg-primary">GET</span> /nft
                        </div>
                        <div class="card-body">
                            <p><strong>Description:</strong> Get all NFTs</p>
                            <p><strong>Parameters:</strong></p>
                            <ul>
                                <li><code>pageNumber</code> (int) - Page number</li>
                                <li><code>pageSize</code> (int) - Items per page</li>
                            </ul>
                            <p><strong>Response:</strong></p>
                            <pre><code>{
  "id": 1,
  "productName": "Aspirin",
  "manufacturer": "PharmaCorp",
  "batchNumber": "BATCH001",
  "expiryDate": "2025-12-31",
  "quantity": 1000,
  "price": 5.99
}</code></pre>
                        </div>
                    </div>

                    <div class="card mb-3">
                        <div class="card-header">
                            <span class="badge bg-success">POST</span> /nft
                        </div>
                        <div class="card-body">
                            <p><strong>Description:</strong> Create a new NFT</p>
                            <p><strong>Request Body:</strong></p>
                            <pre><code>{
  "productName": "Aspirin",
  "manufacturer": "PharmaCorp",
  "batchNumber": "BATCH001",
  "expiryDate": "2025-12-31",
  "quantity": 1000,
  "price": 5.99
}</code></pre>
                        </div>
                    </div>

                    <div class="card mb-3">
                        <div class="card-header">
                            <span class="badge bg-warning">PUT</span> /transfer/{id}
                        </div>
                        <div class="card-body">
                            <p><strong>Description:</strong> Update transfer request status</p>
                            <p><strong>Request Body:</strong></p>
                            <pre><code>{
  "status": "Approved"
}</code></pre>
                        </div>
                    </div>

                    <div class="card mb-3">
                        <div class="card-header">
                            <span class="badge bg-danger">DELETE</span> /nft/{id}
                        </div>
                        <div class="card-body">
                            <p><strong>Description:</strong> Delete an NFT</p>
                        </div>
                    </div>
                </div>

                <!-- API Keys -->
                <div class="tab-pane fade" id="api-keys">
                    <h2>API Keys Management</h2>

                    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#createKeyModal">
                        <i class="fas fa-plus"></i> Create New API Key
                    </button>

                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Key</th>
                                    <th>Created</th>
                                    <th>Last Used</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="apiKeysTable">
                                <!-- Populated by JavaScript -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Rate Limiting -->
                <div class="tab-pane fade" id="rate-limiting">
                    <h2>Rate Limiting</h2>
                    <p>API requests are rate limited to prevent abuse. Default limit is 1000 requests per minute.</p>

                    <h4>Rate Limit Headers</h4>
                    <pre><code>X-RateLimit-Limit: 1000
X-RateLimit-Remaining: 999
X-RateLimit-Reset: 1640000000</code></pre>

                    <h4>Exceeding Rate Limit</h4>
                    <p>When you exceed the rate limit, you'll receive a 429 (Too Many Requests) response:</p>
                    <pre><code>{
  "error": "Rate limit exceeded",
  "retryAfter": 60
}</code></pre>
                </div>

                <!-- Webhooks -->
                <div class="tab-pane fade" id="webhooks">
                    <h2>Webhooks</h2>
                    <p>Webhooks allow you to receive real-time notifications about events in your PharmaDNA account.</p>

                    <h4>Supported Events</h4>
                    <ul>
                        <li><code>nft.created</code> - NFT created</li>
                        <li><code>transfer.requested</code> - Transfer requested</li>
                        <li><code>transfer.approved</code> - Transfer approved</li>
                        <li><code>transfer.completed</code> - Transfer completed</li>
                        <li><code>dispute.created</code> - Dispute reported</li>
                        <li><code>dispute.resolved</code> - Dispute resolved</li>
                    </ul>

                    <h4>Webhook Payload</h4>
                    <pre><code>{
  "event": "nft.created",
  "timestamp": "2024-01-15T10:30:00Z",
  "data": {
    "id": 1,
    "productName": "Aspirin",
    "manufacturer": "PharmaCorp"
  }
}</code></pre>
                </div>

                <!-- Code Examples -->
                <div class="tab-pane fade" id="examples">
                    <h2>Code Examples</h2>

                    <ul class="nav nav-tabs mb-3" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="curl-tab" data-bs-toggle="tab" data-bs-target="#curl">cURL</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="python-tab" data-bs-toggle="tab" data-bs-target="#python">Python</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="javascript-tab" data-bs-toggle="tab" data-bs-target="#javascript">JavaScript</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="csharp-tab" data-bs-toggle="tab" data-bs-target="#csharp">C#</button>
                        </li>
                    </ul>

                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="curl">
                            <pre><code>curl -X GET https://api.pharmadna.com/api/nft \
  -H "X-API-Key: pk_your_api_key" \
  -H "Content-Type: application/json"</code></pre>
                        </div>
                        <div class="tab-pane fade" id="python">
                            <pre><code>import requests

headers = {
    'X-API-Key': 'pk_your_api_key',
    'Content-Type': 'application/json'
}

response = requests.get('https://api.pharmadna.com/api/nft', headers=headers)
print(response.json())</code></pre>
                        </div>
                        <div class="tab-pane fade" id="javascript">
                            <pre><code>const apiKey = 'pk_your_api_key';

fetch('https://api.pharmadna.com/api/nft', {
  method: 'GET',
  headers: {
    'X-API-Key': apiKey,
    'Content-Type': 'application/json'
  }
})
.then(response => response.json())
.then(data => console.log(data))</code></pre>
                        </div>
                        <div class="tab-pane fade" id="csharp">
                            <pre><code>using System.Net.Http;

var client = new HttpClient();
client.DefaultRequestHeaders.Add("X-API-Key", "pk_your_api_key");

var response = await client.GetAsync("https://api.pharmadna.com/api/nft");
var content = await response.Content.ReadAsStringAsync();
Console.WriteLine(content);</code></pre>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create API Key Modal -->
<div class="modal fade" id="createKeyModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create API Key</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createKeyForm">
                    <div class="mb-3">
                        <label class="form-label">Key Name</label>
                        <input type="text" class="form-control" id="keyName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" id="keyDescription" rows="3"></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Rate Limit (requests/minute)</label>
                        <input type="number" class="form-control" id="rateLimit" value="1000">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createApiKey()">Create</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        async function loadApiKeys() {
            try {
                const response = await fetch('/api/developer/api-keys?userId=1');
                const keys = await response.json();
                
                const tbody = document.getElementById('apiKeysTable');
                tbody.innerHTML = '';

                keys.forEach(key => {
                    const row = `
                        <tr>
                            <td>${key.name}</td>
                            <td><code>${key.key}</code></td>
                            <td>${new Date(key.createdAt).toLocaleDateString()}</td>
                            <td>${key.lastUsedAt ? new Date(key.lastUsedAt).toLocaleDateString() : 'Never'}</td>
                            <td><span class="badge ${key.isActive ? 'bg-success' : 'bg-danger'}">${key.isActive ? 'Active' : 'Revoked'}</span></td>
                            <td>
                                <button class="btn btn-sm btn-info" onclick="viewKeyStats(${key.id})">Stats</button>
                                <button class="btn btn-sm btn-danger" onclick="revokeKey(${key.id})">Revoke</button>
                            </td>
                        </tr>
                    `;
                    tbody.innerHTML += row;
                });
            } catch (error) {
                console.error('Error loading API keys:', error);
            }
        }

        async function createApiKey() {
            const name = document.getElementById('keyName').value;
            const description = document.getElementById('keyDescription').value;
            const rateLimit = document.getElementById('rateLimit').value;

            try {
                const response = await fetch('/api/developer/api-keys', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        userId: 1,
                        name,
                        description,
                        rateLimit: parseInt(rateLimit)
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    alert(`API Key created!\n\nKey: ${result.key}\nSecret: ${result.secret}\n\nSave your secret in a safe place!`);
                    document.getElementById('createKeyForm').reset();
                    bootstrap.Modal.getInstance(document.getElementById('createKeyModal')).hide();
                    loadApiKeys();
                }
            } catch (error) {
                console.error('Error creating API key:', error);
                alert('Failed to create API key');
            }
        }

        async function revokeKey(keyId) {
            if (!confirm('Are you sure you want to revoke this API key?')) return;

            try {
                const response = await fetch(`/api/developer/api-keys/${keyId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    alert('API key revoked successfully');
                    loadApiKeys();
                }
            } catch (error) {
                console.error('Error revoking API key:', error);
                alert('Failed to revoke API key');
            }
        }

        function viewKeyStats(keyId) {
            alert('API key statistics view coming soon');
        }

        document.addEventListener('DOMContentLoaded', () => {
            loadApiKeys();
        });
    </script>
}
